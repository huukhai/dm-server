/*
 * Funambol is a mobile platform developed by Funambol, Inc.
 * Copyright (C) 2011 Funambol, Inc.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by
 * the Free Software Foundation with the addition of the following permission
 * added to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED
 * WORK IN WHICH THE COPYRIGHT IS OWNED BY FUNAMBOL, FUNAMBOL DISCLAIMS THE
 * WARRANTY OF NON INFRINGEMENT  OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301 USA.
 *
 * You can contact Funambol, Inc. headquarters at 643 Bair Island Road, Suite
 * 305, Redwood City, CA 94063, USA, or at email address info@funambol.com.
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License version 3.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License
 * version 3, these Appropriate Legal Notices must retain the display of the
 * "Powered by Funambol" logo. If the display of the logo is not reasonably
 * feasible for technical reasons, the Appropriate Legal Notices must display
 * the words "Powered by Funambol".
 */


/**
 *
 *
 *
 *
 * @version $Id: 10.bsh,v 1.11 2007-06-19 08:16:10 luigiafassina Exp $
 */

import com.funambol.framework.engine.dm.*;
import com.funambol.framework.core.Util;

private static final int NODE_LENGTH = 20000;

String nodeName = "./SCTSLrgObjText";


void init() {
  log.info("bsh: Management script initialization");
}

void getNextOperations() {
  log.info("bsh: getManagementOperation!");

  if ( cont == 0) {

    nodes = new HashMap();
    nodes.put(nodeName, getLargeObjectData(NODE_LENGTH));
    ManagementOperation o1 = new AddManagementOperation();
    o1.nodes = nodes;
    operations = new ManagementOperation[] {o1};

  } else if ( cont == 1) {

    ManagementOperation o2 = new GetManagementOperation();

  nodes = new HashMap();
    nodes.put(nodeName, "");
    o2.nodes = nodes;

    operations = new ManagementOperation[] {o2};

  } else {

    operations = new ManagementOperation[0];

  }
}

void setOperationResults() {
  log.info("bsh: setOperationResults!");

  if (cont == 0) {
  for (result: results) {
          log.info("bsh: status code for add operation: " + result.statusCode);
          log.info("bsh: for: " + result.nodes);
  }
  } else if (cont == 1) {
      String value = null;
      for (result: results) {
          log.info("bsh: status code for get operation: " + result.statusCode);
          log.info("bsh: for: " + result.nodes);

          value = (String)(result.getNodes().get(nodeName));
          if (value!=null && value.length() != NODE_LENGTH) {
            throw new ManagementException("Test failed. Received value length: " + value.length() +  " (expected " + NODE_LENGTH + ")");
          }
          
          if (value != null) {
            log.info("bsh: length: " + value.length());
          }
      }
  dmstate.state = DeviceDMState.STATE_COMPLETED;
  } else {
      for (result: results) {
            log.info("bsh: status code: " + result.statusCode);
            log.info("bsh: for: " + result.nodes);
      }
  }

  cont++;
}

void setGenericAlerts(){
  int numAlerts = genericAlerts.length;
  log.info("bsh: setGenericAlerts! (num. alerts: " + numAlerts + ")");
  
  for (int i=0; i<numAlerts; i++) {
      log.info("Alert[" + i + "]: " + Util.toXML(genericAlerts[i]));
  }
}

void endSession(int code) {
  log.info("bsh: endSession with code: " + (char)code);
}



String getLargeObjectData(int length) {

    char[] c = new char[length];
    int value = 0;
    int i = 0;
    int j = 0;
   
    for (j = 65; j <= 90; j++) {
      c[i++] = (char)j;
      if (i == length) {
          break;
      }

      if (j == 90) {
          j = 64;
      }
    }

    String s = new String(c);
    return s;
}


log.info("bsh: Global script!");

int cont = 0;
