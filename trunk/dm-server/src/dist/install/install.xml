<?xml version="1.0"?>

<!--
 * Funambol is a mobile platform developed by Funambol, Inc.
 * Copyright (C) 2011 Funambol, Inc.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by
 * the Free Software Foundation with the addition of the following permission
 * added to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED
 * WORK IN WHICH THE COPYRIGHT IS OWNED BY FUNAMBOL, FUNAMBOL DISCLAIMS THE
 * WARRANTY OF NON INFRINGEMENT  OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301 USA.
 *
 * You can contact Funambol, Inc. headquarters at 643 Bair Island Road, Suite
 * 305, Redwood City, CA 94063, USA, or at email address info@funambol.com.
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License version 3.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License
 * version 3, these Appropriate Legal Notices must retain the display of the
 * "Powered by Funambol" logo. If the display of the logo is not reasonably
 * feasible for technical reasons, the Appropriate Legal Notices must display
 * the words "Powered by Funambol".
-->

<!--
  =============================================================================
    Build file for the installation and configuration of Funambol DM Server.

    $Id: install.xml,v 1.8 2007-06-19 08:16:10 luigiafassina Exp $

  =============================================================================
-->
<project name="Funambol Data Management Server Setup" default="usage" basedir="..">

    <!--
       ========================================================================
         Help on usage. List available targets
       ========================================================================
    -->
    <target name="usage" depends="init">

        <echo message=""/>
        <echo message="Welcome to Funambol Data Management Server Setup"/>
        <echo message="--------------------------------------"/>
        <echo message=""/>
        <echo message=" Available targets are :"/>
        <echo message=""/>
        <echo message=" usage   --> help on usage"/>
        <echo message=" install --> install Funambol Data Management Server Setup into the server specified by ENV.APPSRV"/>
        <echo message=""/>

    </target>

    <!-- =================================================================== -->
    <!-- Properties setting                                                  -->

    <property file="install.properties" />
    <property file="install/release.properties" />

    <!-- Pick up the environment variables -->
    <property environment="ENV"/>

    <property name="xmlsrcdir"                       value="${basedir}/output/config/common/xml"/>
    <property name="sourcedir"                       value="${basedir}/db"               />
    <property name="libdir"                          value="${basedir}/lib"              />
    <property name="syncserver-jarfilename"          value="funambol-server.jar"           />
    <property name="syncserver-warfilename"          value="funambol-server.war"           />
    <property name="syncserver-earfilename"          value="funambol-dm-server.ear"        />
    <property name="commons-lang-jarfilename"        value="commons-lang-2.2.jar"      />
    <property name="commons-collections-jarfilename" value="commons-collections.jar"     />
    <property name="dmdemo.warfilename"                      value="dmdemo.war"                  />

    <import file="${ENV.APPSRV}.xml"/>


    <!-- =================================================================== -->

    <!-- =================================================================== -->
    <!-- install - deploying the enterprise archive                         -->
    <!-- =================================================================== -->
    <target name="install" depends="init, as-init, pre-inst-common, as-inst, post-inst-common, post-inst-specific, ${syncserver-earfilename}, as-deploy, clean">
    </target>

    <!-- =================================================================== -->

    <!-- =================================================================== -->
    <!-- init - initialize the build directories                             -->
    <!-- =================================================================== -->
    <target name="init">
        <!-- Directory preparation -->
        <mkdir dir="output" />
    </target>

    <!-- =================================================================== -->
    <!-- clean - Delete output dir after installation                        -->
    <!-- =================================================================== -->
    <target name="clean">
        <echo message="Remove output dir"/>
        <delete dir="output" quiet="true"/>
    </target>


    <!-- ===================================================================== -->
    <!-- syncserver.war - updating the web archive                             -->
    <!-- ===================================================================== -->
    <target name="${syncserver-warfilename}" depends="init">
    </target>

    <!-- =================================================================== -->
    <!-- syncserver.jar - updating the ejb archive                           -->
    <!-- =================================================================== -->
    <target name="${syncserver-jarfilename}" depends="init">
    </target>

    <!-- =================================================================== -->
    <!-- syncserver.ear - updating enterprise application archive            -->
    <!-- =================================================================== -->
    <target name="${syncserver-earfilename}"
            depends="init, ${syncserver-warfilename}, ${syncserver-jarfilename}">

          <mkdir dir="output/tmp" />

          <unzip src="output/${syncserver-earfilename}"
                 dest="output/tmp">
          </unzip>

          <copy todir="output/tmp/META-INF" overwrite="true">
              <fileset dir="output/config/jboss/xml" includes="application.xml"/>
          </copy>

          <delete file="output/${syncserver-earfilename}"/>

          <zip destfile="output/${syncserver-earfilename}"
                update="false">
                <fileset dir="output/tmp"/>
          </zip>

          <jar destfile="output/${syncserver-earfilename}"
               update="true">
                <zipfileset dir="output" prefix="lib">
                  <include name="dmdemo-common.jar"/>
                </zipfileset>
          </jar>

    </target>


    <!-- ===================================================================== -->
    <!-- pre-inst-common - Installation tasks common to any application server -->
    <!-- ===================================================================== -->
    <target name="pre-inst-common" depends="init">

    <!-- Copy default configuration files in destination directories -->

        <copy todir="output/config" overwrite="true">
            <fileset dir="default/config"/>
        </copy>

        <copy todir="output" overwrite="true">
            <fileset dir="default/lib" includes="*"/>
        </copy>

        <copy todir="${libdir}" overwrite="true">
            <fileset dir="default/lib" includes="funambol-clientframework.jar"/>
        </copy>

        <copy todir="${libdir}/logging" overwrite="true">
            <fileset dir="default/config/common/properties/p6spy" includes="spy.properties"/>
        </copy>

        <!--
             Update configuration files with the properties specified in
             install.properties and the tokenfilter specified in tokenfilter.properties
        -->
        <replace dir="output/config"
                 propertyFile="install.properties"
                 summary="true">
            <include name="**/*"/>
            <replacefilter token="{server-name}"   property="server-name"  />
            <replacefilter token="{context-path}"  property="context-path" />
            <replacefilter token="{funambol-path}" value   ="${basedir}"   />
            <replacefilter token="{source-path}"   value   ="${sourcedir}" />
            <replacefilter token="{jdbc-driver}"   property="jdbc.driver"  />
            <replacefilter token="{jdbc-url}"      property="jdbc.url"     />
            <replacefilter token="{jdbc-user}"     property="jdbc.user"    />
            <replacefilter token="{jdbc-password}" property="jdbc.password"/>
            <replacefilter token="{jdbc-jarfile}"  property="jdbc.file"/>
            <replacefilter token="{jdbc-modulename}" property="jdbc.module"/>
            <replacefilter token="{jndi-ds}"       value   ="${jndi-ds}"   />
        </replace>

        <!-- Database initialization -->
        <antcall target="install-db" inheritAll="true"/>

    </target>

    <!-- ====================================================================== -->
    <!-- post-inst-common - Installation tasks common to any application server -->
    <!-- after the installation of modules                                      -->
    <!-- ====================================================================== -->
    <target name="post-inst-common" depends="init">


        <!--
             Update configuration files with the properties specified in
             install.properties and the tokenfilter specified in tokenfilter.properties
        -->
        <replace dir="output/config"
                 propertyFile="install.properties"
                 summary="true">
            <include name="**/*"/>
            <replacefilter token="{server-name}"   property="server-name"  />
            <replacefilter token="{context-path}"  property="context-path" />
            <replacefilter token="{funambol-path}" value   ="${basedir}"   />
            <replacefilter token="{source-path}"   value   ="${sourcedir}" />
            <replacefilter token="{jdbc-driver}"   property="jdbc.driver"  />
            <replacefilter token="{jdbc-url}"      property="jdbc.url"     />
            <replacefilter token="{jdbc-user}"     property="jdbc.user"    />
            <replacefilter token="{jdbc-password}" property="jdbc.password"/>
            <replacefilter token="{jdbc-jarfile}"  property="jdbc.file"/>
            <replacefilter token="{jdbc-modulename}" property="jdbc.module"/>
            <replacefilter token="{jndi-ds}"       value   ="${jndi-ds}"   />
        </replace>
        <replace file="lib/logging/spy.properties"
                 propertyFile="install.properties"
                 summary="true">
            <replacefilter token="{jdbc-driver}" property="jdbc.driver"/>
        </replace>

        <replace dir="bin"
                 propertyFile="install.properties"
                 summary="true">
            <replacefilter token="{funambol-path}" value ="${basedir}"/>
        </replace>

        <!-- Copy configuration files to the configuration path -->
        <copy todir="config">
            <fileset dir="output/config/common/beans" includes="**/*"/>
        </copy>

        <copy todir="config">
            <fileset dir="output/config/common/properties" includes="Funambol.properties"/>
        </copy>

    </target>

    <!-- =============================================== -->
    <!-- INSTALL, DROP, CREATE and INIT DB               -->
    <!-- =============================================== -->

    <target name="install-db" depends="init" if="do.install-db">
        <antcall target="install-db-base"/>
    </target>

    <target name="install-db-base" unless="do.install-modules-only">

      <input validargs="y,n" addproperty="in.createdb">
The Funambol DM Server installation program can now create the database.
You can skip this step if you have already a valid database created.

If you choose 'y' your existing data will be deleted.

Do you want to recreate the database?
      </input>

      <condition property="do.createdb">
        <equals arg1="y" arg2="${in.createdb}"/>
      </condition>

      <antcall target="dropdb"          inheritAll="true"/>
      <antcall target="createdb"        inheritAll="true"/>
      <antcall target="initdb"          inheritAll="true"/>
      <antcall target="dropdb_dmdemo"   inheritAll="true"/>
      <antcall target="createdb_dmdemo" inheritAll="true"/>



    </target>


    <target name="dropdb" depends="init" if="do.createdb">
      <sql driver    = "${jdbc.driver}"
           url       = "${jdbc.url}"
           userid    = "${jdbc.user}"
           password  = "${jdbc.password}"
           classpath = "${jdbc.classpath}"
           onerror   = "continue"
           src       = "default/sql/${dbms}/drop_engine.ddl"
      />
    </target>

    <target name="createdb" depends="init" if="do.createdb">
      <sql driver    = "${jdbc.driver}"
           url       = "${jdbc.url}"
           userid    = "${jdbc.user}"
           password  = "${jdbc.password}"
           classpath = "${jdbc.classpath}"
           onerror   = "stop"
           src       = "default/sql/${dbms}/create_engine.ddl"
      />
    </target>

    <target name="initdb" depends="init" if="do.createdb">
      <sql driver    = "${jdbc.driver}"
           url       = "${jdbc.url}"
           userid    = "${jdbc.user}"
           password  = "${jdbc.password}"
           classpath = "${jdbc.classpath}"
           onerror   = "stop"
           src       = "default/sql/${dbms}/init_engine.sql"
      />
    </target>

    <target name="dropdb_dmdemo" depends="init" if="do.createdb">
      <sql driver    = "${jdbc.driver}"
           url       = "${jdbc.url}"
           userid    = "${jdbc.user}"
           password  = "${jdbc.password}"
           classpath = "${jdbc.classpath}"
           onerror   = "continue"
           src       = "default/sql/${dbms}/drop_engine_dmdemo.ddl"
      />
    </target>


    <target name="createdb_dmdemo" depends="init" if="do.createdb">
      <sql driver    = "${jdbc.driver}"
           url       = "${jdbc.url}"
           userid    = "${jdbc.user}"
           password  = "${jdbc.password}"
           classpath = "${jdbc.classpath}"
           onerror   = "stop"
           src       = "default/sql/${dbms}/create_engine_dmdemo.ddl"
      />
    </target>


    <!-- =============================================== -->
    <!-- ENV                                             -->
    <!-- =============================================== -->

    <target name="env">
      <echo message="user.home   = ${user.home}"/>
      <echo message="J2EE HOME   = ${ENV.J2EE_HOME}"/>
    </target>

</project>
