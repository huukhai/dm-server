/*
 * Funambol is a mobile platform developed by Funambol, Inc.
 * Copyright (C) 2011 Funambol, Inc.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by
 * the Free Software Foundation with the addition of the following permission
 * added to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED
 * WORK IN WHICH THE COPYRIGHT IS OWNED BY FUNAMBOL, FUNAMBOL DISCLAIMS THE
 * WARRANTY OF NON INFRINGEMENT  OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301 USA.
 *
 * You can contact Funambol, Inc. headquarters at 643 Bair Island Road, Suite
 * 305, Redwood City, CA 94063, USA, or at email address info@funambol.com.
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License version 3.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License
 * version 3, these Appropriate Legal Notices must retain the display of the
 * "Powered by Funambol" logo. If the display of the logo is not reasonably
 * feasible for technical reasons, the Appropriate Legal Notices must display
 * the words "Powered by Funambol".
 */


/**
 *
 *
 *
 *
 * @version $Id: 9.bsh,v 1.5 2007-06-19 08:16:10 luigiafassina Exp $
 */

import com.funambol.framework.engine.dm.*;
import com.funambol.framework.core.Util;

void init() {
  log.info("bsh: Management script initialization");
}

void getNextOperations() {
  log.info("bsh: getManagementOperation!");

  nodes = new HashMap();

  nodes.put("./SCTSValue", "");

  ManagementOperation mo1 = null;


  mo1 = new ReplaceManagementOperation();
  mo1.nodes = nodes;


  ManagementOperation mo2 = null;

  mo2 = new ReplaceManagementOperation();
  mo2.nodes = nodes;


  ManagementOperation mo = new AtomicManagementOperation();
  mo.setOperations(new ManagementOperation[] {mo1, mo2});


  if (cont) {
    operations = new ManagementOperation[] { mo };
    cont = false;
  } else {
    operations = new ManagementOperation[0];
  }
}

void setOperationResults() {
  log.info("bsh: setOperationResults!");

  for (result: results) {
    log.info("bsh: status code: " + result.statusCode);
    log.info("bsh: for: " + result.nodes);
  }

  dmstate.state = DeviceDMState.STATE_COMPLETED;
}

void setGenericAlerts(){
  int numAlerts = genericAlerts.length;
  log.info("bsh: setGenericAlerts! (num. alerts: " + numAlerts + ")");
  
  for (int i=0; i<numAlerts; i++) {
      log.info("Alert[" + i + "]: " + Util.toXML(genericAlerts[i]));
  }
}

void endSession(int code) {
  log.info("bsh: endSession with code: " + (char)code);
}

log.info("bsh: Global script!");

cont = true;
